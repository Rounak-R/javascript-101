01> what is the difference between let and var in js?

In JavaScript, both `let` and `var` are used for variable declaration, but they have some key differences in terms of scoping and hoisting:

1. **Scope:**
   - Variables declared with `var` are function-scoped or globally scoped. This means they are accessible throughout the entire function in which they are declared, regardless of block scope.
   - Variables declared with `let` are block-scoped. This means they are only accessible within the block (enclosed by curly braces) in which they are declared, including loops, conditional statements, and other blocks.

2. **Hoisting:**
   - Variables declared with `var` are hoisted to the top of their function scope. This means that they can be accessed and assigned before they are declared in the code, although their value will be `undefined` until assigned.
   - Variables declared with `let` are also hoisted, but they are not initialized. Attempting to access a `let` variable before its declaration will result in a ReferenceError.

3. **Re-declaration:**
   - Variables declared with `var` can be re-declared within the same scope without any errors.
   - Variables declared with `let` cannot be re-declared within the same scope. Attempting to do so will result in a SyntaxError.

Here's a brief example to illustrate these differences:

```javascript
// Using var
function varExample() {
    if (true) {
        var x = 10;
    }
    console.log(x); // Outputs 10
}

// Using let
function letExample() {
    if (true) {
        let y = 20;
    }
    console.log(y); // ReferenceError: y is not defined
}

// Redeclaration
var z = 30;
var z = 40; // No errors

let a = 50;
let a = 60; // SyntaxError: Identifier 'a' has already been declared
```
In general, it's recommended to use `let` over `var` because it provides better scoping and avoids some common pitfalls associated with `var`, particularly in modern JavaScript development.


02> What is Compile time and Run time?Is javascript static or dynamically typed?

a>Compile time is when the code is translated into machine-readable form, and runtime is when the compiled code is executed by the computer. Compile-time errors are detected by the compiler, while runtime errors occur during program execution.

b>JavaScript is dynamically typed. This means that variable types are determined at runtime, not during compilation. In JavaScript, you don't have to explicitly specify the data type of a variable when you declare it. Instead, the type of a variable can change during the execution of a program based on the type of value assigned to it.

For example, you can assign a string value to a variable and later assign a number to the same variable without any explicit type declarations:

```javascript
let x; // Variable declaration without specifying type
x = "Hello"; // Assigning a string value
console.log(typeof x); // Output: string

x = 42; // Assigning a number value
console.log(typeof x); // Output: number
```

This flexibility in variable typing allows for dynamic behavior in JavaScript but can also lead to certain types of errors if not handled carefully.

03> In JavaScript, most primitive data types are stored directly in the stack when they are part of a function's execution context, while objects and more complex data structures are stored in the heap and accessed via references. However, these details are abstracted away from developers, and they typically don't need to worry about memory management at this level.

STACK=>PRIMITIVE DATATYPES=>ACCESSED BY VALUES (IS PROVIDED WITH A COPY OF THE MEMORY)
HEAP=>OBJECTS AND MORE COMPLEX DATASTRUCTURES=>ACCESSED BY REFERNCE(WRITE ON THE ORGINAL MEMORY)
